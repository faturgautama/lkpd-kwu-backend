// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model sekolah {
    id_sekolah   Int      @id @default(autoincrement())
    nama_sekolah String
    alamat       String?
    no_telepon   String?
    kode_pos     String?
    is_active    Boolean  @default(true)
    create_at    DateTime @default(now())
    kelas        kelas[]
    guru         guru[]
}

model kelas {
    id_kelas   Int      @id @default(autoincrement())
    kelas      String
    sekolah    sekolah  @relation(fields: [id_sekolah], references: [id_sekolah], onDelete: Restrict)
    id_sekolah Int
    is_active  Boolean  @default(true)
    create_at  DateTime @default(now())
    siswa      siswa[]
    materi     materi[]
    proyek     proyek[]
    kuis       kuis[]
}

model guru {
    id_guru      Int      @id @default(autoincrement())
    nama_lengkap String
    nip          String?
    sekolah      sekolah  @relation(fields: [id_sekolah], references: [id_sekolah], onDelete: Restrict)
    id_sekolah   Int
    is_active    Boolean  @default(true)
    create_at    DateTime @default(now())
}

model siswa {
    id_siswa              Int                     @id @default(autoincrement())
    nama_lengkap          String
    no_absen              String
    kelas                 kelas                   @relation(fields: [id_kelas], references: [id_kelas], onDelete: Restrict)
    id_kelas              Int
    is_active             Boolean                 @default(true)
    create_at             DateTime                @default(now())
    siswa_kelompok_proyek siswa_kelompok_proyek[]
    user                  user?
    jawaban_kuis          jawaban_kuis[]
    nilai_kuis            nilai_kuis[]
}

model user {
    id_user               Int                     @id @default(autoincrement())
    id_guru               Int?
    siswa                 siswa?                  @relation(fields: [id_siswa], references: [id_siswa])
    id_siswa              Int?                    @unique
    email                 String
    password              String
    register_at           DateTime                @default(now())
    is_active             Boolean                 @default(true)
    siswa_kelompok_proyek siswa_kelompok_proyek[]
}

model materi {
    id_materi    Int       @id @default(autoincrement())
    kelas        kelas     @relation(fields: [id_kelas], references: [id_kelas], onDelete: Restrict)
    id_kelas     Int
    judul        String
    file_name    String
    file_base_64 String
    create_at    DateTime  @default(now())
    create_by    Int
    update_at    DateTime?
    update_by    Int?
}

model proyek {
    id_proyek       Int               @id @default(autoincrement())
    judul           String
    deskripsi       String?
    kelas           kelas             @relation(fields: [id_kelas], references: [id_kelas], onDelete: Restrict)
    id_kelas        Int
    create_at       DateTime          @default(now())
    create_by       Int
    is_active       Boolean           @default(true)
    kelompok_proyek kelompok_proyek[]
}

model kelompok_proyek {
    id_kelompok_proyek    Int                     @id @default(autoincrement())
    kelompok_proyek       String
    proyek                proyek                  @relation(fields: [id_proyek], references: [id_proyek], onDelete: Restrict)
    id_proyek             Int
    hasil                 String
    nilai_pertemuan_1     Float?
    nilai_pertemuan_2     Float?
    nilai_pertemuan_3     Float?
    nilai_pertemuan_4     Float?
    create_at             DateTime                @default(now())
    create_by             Int
    update_at             DateTime?
    update_by             Int?
    is_active             Boolean                 @default(true)
    siswa_kelompok_proyek siswa_kelompok_proyek[]
}

model siswa_kelompok_proyek {
    id_siswa_kelompok_proyek Int             @id @default(autoincrement())
    kelompok_proyek          kelompok_proyek @relation(fields: [id_kelompok_proyek], references: [id_kelompok_proyek], onDelete: Restrict)
    id_kelompok_proyek       Int
    user                     user            @relation(fields: [id_user], references: [id_user], onDelete: Restrict)
    id_user                  Int
    siswa                    siswa           @relation(fields: [id_siswa], references: [id_siswa], onDelete: Restrict)
    id_siswa                 Int
}

model kuis {
    id_kuis         Int               @id @default(autoincrement())
    kelas           kelas             @relation(fields: [id_kelas], references: [id_kelas], onDelete: Restrict)
    id_kelas        Int
    judul           String
    kategori_kuis   String
    deskripsi       String?
    start_date      DateTime?
    end_date        DateTime?
    create_at       DateTime          @default(now())
    create_by       Int
    update_at       DateTime?
    update_by       Int?
    is_active       Boolean           @default(true)
    pertanyaan_kuis pertanyaan_kuis[]
    nilai_kuis      nilai_kuis[]
}

model pertanyaan_kuis {
    id_pertanyaan Int            @id @default(autoincrement())
    kuis          kuis           @relation(fields: [id_kuis], references: [id_kuis], onDelete: Restrict)
    id_kuis       Int
    pertanyaan    String
    option_a      String
    option_b      String
    option_c      String
    option_d      String
    option_e      String
    correct       String
    create_at     DateTime       @default(now())
    create_by     Int
    jawaban_kuis  jawaban_kuis[]
}

model jawaban_kuis {
    id_jawaban    Int             @id @default(autoincrement())
    pertanyaan    pertanyaan_kuis @relation(fields: [id_pertanyaan], references: [id_pertanyaan], onDelete: Restrict)
    id_pertanyaan Int
    siswa         siswa           @relation(fields: [id_siswa], references: [id_siswa], onDelete: Restrict)
    id_siswa      Int
    jawaban       String
    is_correct    Boolean
    submit_at     DateTime        @default(now())
}

model nilai_kuis {
    id_nilai_kuis Int      @id @default(autoincrement())
    kuis          kuis     @relation(fields: [id_kuis], references: [id_kuis], onDelete: Restrict)
    id_kuis       Int
    siswa         siswa    @relation(fields: [id_siswa], references: [id_siswa], onDelete: Restrict)
    id_siswa      Int
    nilai         Decimal
    create_at     DateTime @default(now())
    create_by     Int
}

model referensi {
    id_referensi Int      @id @default(autoincrement())
    judul        String
    deskripsi    String?
    link         String
    create_at    DateTime @default(now())
    create_by    Int
}
